import sys
import os
import pytesseract
from PIL import ImageGrab
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QListWidget, QLineEdit, QComboBox,
    QSystemTrayIcon, QMenu, QListWidgetItem, QMessageBox
)
from PyQt5.QtCore import Qt, QSize, QThread, pyqtSignal
from PyQt5.QtGui import QIcon, QColor
import qdarkstyle
import pyttsx3
from groq import Groq  # ✅ Using Groq SDK

# ========== CONFIGURATION ========== #
GROQ_API_KEY = "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"

# Initialize Groq client
client = Groq(api_key=GROQ_API_KEY)

# ========== AI SERVICES ========== #
class GroqAIThread(QThread):
    response_ready = pyqtSignal(str)

    def __init__(self, prompt):
        super().__init__()
        self.prompt = prompt

    def run(self):
        try:
            messages = [{"role": "user", "content": self.prompt}]
            completion = client.chat.completions.create(
                model="llama-3.3-70b-versatile",
                messages=messages,
                temperature=0.7,
                max_tokens=4096,
                stream=False
            )
            response_text = completion.choices[0].message.content
            self.response_ready.emit(response_text)
        except Exception as e:
            self.response_ready.emit(f"[AI Error] {str(e)}")

class LocalAIThread(QThread):
    response_ready = pyqtSignal(str)

    def __init__(self, prompt):
        super().__init__()
        self.prompt = prompt

    def run(self):
        try:
            import requests
            response = requests.post(
                'http://localhost:11434/api/generate',
                json={
                    "model": "llama-3.3-70b-versatile",
                    "prompt": self.prompt,
                    "stream": False
                },
                timeout=45
            )
            self.response_ready.emit(response.json().get('response', ''))
        except Exception as e:
            self.response_ready.emit(f"[Local AI Error] {str(e)}")

# ========== MAIN GUI ========== #
class ZACKChatApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("🤖 ZACK PRO AI Assistant")
        self.setWindowIcon(QIcon("ai_icon.png"))
        self.resize(1000, 800)
        self.conversation_history = []
        self.init_ui()
        self.apply_styles()
        self.setup_tray()

    def init_ui(self):
        main_layout = QHBoxLayout(self)

        # Left Sidebar
        sidebar = QVBoxLayout()

        self.model_selector = QComboBox()
        self.model_selector.addItems(["Groq (Online)", "Ollama (Local)"])
        sidebar.addWidget(QLabel("🧠 AI Engine:"))
        sidebar.addWidget(self.model_selector)

        self.btn_capture = QPushButton("📸 Capture Screen")
        self.btn_capture.clicked.connect(self.capture_screen)
        sidebar.addWidget(self.btn_capture)

        self.btn_clear = QPushButton("🧹 Clear Chat")
        self.btn_clear.clicked.connect(self.clear_chat)
        sidebar.addWidget(self.btn_clear)

        sidebar.addStretch()
        sidebar_widget = QWidget()
        sidebar_widget.setLayout(sidebar)
        sidebar_widget.setFixedWidth(250)
        main_layout.addWidget(sidebar_widget)

        # Right Panel
        right_panel = QVBoxLayout()
        self.chat_history = QListWidget()
        self.chat_history.setWordWrap(True)
        right_panel.addWidget(self.chat_history)

        input_layout = QHBoxLayout()
        self.input_field = QLineEdit()
        self.input_field.setPlaceholderText("Ask ZACK anything...")
        self.input_field.returnPressed.connect(self.send_message)
        input_layout.addWidget(self.input_field)

        self.btn_send = QPushButton("🚀")
        self.btn_send.setFixedSize(50, 40)
        self.btn_send.clicked.connect(self.send_message)
        input_layout.addWidget(self.btn_send)

        right_panel.addLayout(input_layout)
        main_layout.addLayout(right_panel)

    def apply_styles(self):
        self.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
        self.chat_history.setStyleSheet("""
            QListWidget {
                background: #1e1e2e;
                border: 1px solid #313244;
                font-size: 14px;
            }
            QListWidget::item {
                border-radius: 8px;
                padding: 12px;
                margin: 8px;
            }
        """)

    def setup_tray(self):
        self.tray_icon = QSystemTrayIcon(QIcon("ai_icon.png"), self)
        menu = QMenu()
        menu.addAction("Show", self.show)
        menu.addAction("Exit", self.close)
        self.tray_icon.setContextMenu(menu)
        self.tray_icon.show()

    def send_message(self):
        prompt = self.input_field.text().strip()
        if not prompt:
            return

        self.add_message(prompt, "user")
        self.input_field.clear()
        self.conversation_history.append({"role": "user", "content": prompt})

        if self.model_selector.currentText() == "Groq (Online)":
            self.thread = GroqAIThread(prompt)
        else:
            self.thread = LocalAIThread(prompt)

        self.thread.response_ready.connect(self.handle_response)
        self.thread.start()

    def handle_response(self, response):
        self.add_message(response, "ai")
        self.speak(response)
        self.conversation_history.append({"role": "assistant", "content": response})

    def add_message(self, text, sender="system"):
        item = QListWidgetItem(text)
        lines = max(3, text.count('\n') + 1)
        item.setSizeHint(QSize(-1, min(300, lines * 25)))

        if sender == "user":
            item.setForeground(QColor("#cdd6f4"))
            item.setBackground(QColor("#313244"))
            item.setTextAlignment(Qt.AlignRight)
        else:
            item.setForeground(QColor("#89dceb"))
            item.setBackground(QColor("#1e1e2e"))
            item.setTextAlignment(Qt.AlignLeft)

        self.chat_history.addItem(item)
        self.chat_history.scrollToBottom()

    def capture_screen(self):
        try:
            screenshot = ImageGrab.grab()
            screenshot = screenshot.convert('L').point(lambda x: 0 if x < 140 else 255)
            text = pytesseract.image_to_string(screenshot)
            self.add_message(f"📸 Captured Text:\n{text.strip()}", "system")
        except Exception as e:
            self.add_message(f"❌ OCR Error: {str(e)}", "system")

    def speak(self, text):
        try:
            engine = pyttsx3.init()
            engine.setProperty('rate', 150)
            engine.say(text[:500])
            engine.runAndWait()
        except Exception as e:
            print(f"[TTS Error] {e}")

    def clear_chat(self):
        self.chat_history.clear()
        self.conversation_history = []

    def closeEvent(self, event):
        self.tray_icon.hide()
        event.accept()

# ========== RUN APPLICATION ========== #
if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    # Fixed key validation logic
    if GROQ_API_KEY and GROQ_API_KEY.startswith("gsk_"):
        window = ZACKChatApp()
        window.show()
        sys.exit(app.exec_())
    else:
        QMessageBox.critical(None, "Invalid API Key", 
            "Please check your Groq API key!\nGet one from: https://console.groq.com/")
        sys.exit(1)
